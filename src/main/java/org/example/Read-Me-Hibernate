A list of commonly used Hibernate annotations, which are essential for developers working with Hibernateâ€”
a framework in Java for mapping objects to database tables. Here's a breakdown of the annotations mentioned:

----->Annotations in Hibernate

-->@Entity
----->Marks a class as a JPA entity, meaning it is mapped to a database table.
----->Each instance of the class corresponds to a row in the table.

-->@Table
----->Specifies the details of the database table associated with the entity.
----->You can define attributes like the table name using name (e.g., @Table(name = "brands")).

-->@Id
----->Indicates the primary key of an entity.
----->It is mandatory for every entity and often used alongside @GeneratedValue for automatic ID generation.

-->@GeneratedValue
----->Used with @Id to automatically generate unique primary key values during persistence.
----->Supports strategies like GenerationType.IDENTITY, GenerationType.AUTO, and others for ID generation.

-->@Column
----->Maps a field to a specific column in the database table.
----->Allows customization of column attributes such as name, length, and uniqueness (e.g., @Column(name = "brandName")).

-->@Transient
----->Marks a field or property that should not be persisted to the database.
----->Useful for fields that are derived or calculated (e.g., @Transient private String fullName;).

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>

In Hibernate (a popular ORM tool in Java), both get() and load() methods are used to retrieve objects from the database
using their primary key. However, they behave differently in terms of how and when they hit the database and what happens when the object doesn't exist.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>

âœ… get() Method
Signature:
public Object get(Class clazz, Serializable id)

ðŸ”¹ Characteristics:
Eager loading: Immediately hits the database and returns the actual object.
Returns null if no object is found for the given ID.
Used when you want to check if the object exists or not.
Safe to use when you're not sure if the record exists.

ðŸ”¹ Example:
Session session = sessionFactory.openSession();
Employee emp = session.get(Employee.class, 101); // Immediately hits the DB

if (emp != null) {
    System.out.println(emp.getName());
} else {
    System.out.println("Employee not found");
}

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>

âœ… load() Method

Signature:

public Object load(Class clazz, Serializable id)

ðŸ”¹ Characteristics:
Lazy loading (by default): Returns a proxy object without hitting the database immediately.
Only hits the DB when you try to access a property of the object.
Throws ObjectNotFoundException if no record is found when it tries to access the DB.
Useful when you're sure the object exists and want to avoid an immediate DB hit.

ðŸ”¹ Example:
Session session = sessionFactory.openSession();
Employee emp = session.load(Employee.class, 101); // Returns proxy, doesn't hit DB yet
System.out.println(emp.getName()); // Now hits the DB

If the object with ID 101 doesn't exist, you'll get an ObjectNotFoundException at the point where you access its data.

<<<<<-------------------------------------------------------------------------------------------------------------->>>>>
